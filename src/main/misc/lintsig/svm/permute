#!/usr/bin/perl
use strict;
use warnings;

use constant GRANULARITY => 5;

use constant G_LOW  => 70;
use constant G_HIGH => 100;
use constant B_LOW  => 0;
use constant B_HIGH => 30;

# remove the call to this sub for full permutation -
# no doubt this sub could be much cleaner/faster... but not time for that...
sub downsample {
   my @bits = reverse(split('',sprintf('%b',shift)));
   my $s = 0;
   while (scalar(@bits)) {
      my $bit = shift(@bits);
      if (!$s and $bit) {
         $s = 1;
      } elsif (($s == 1) && !$bit) {
         $s++;
      } elsif (($s == 2) && $bit) {
         return 1;
      }
   }
   return 0;
}

#  sub bits2range {
#     my ($bits, $low) = @_;
#  #  printf("%8s  ", sprintf('%b',$bits));
#     my @bits = reverse(split('',sprintf('%b',$bits)));
#     my @ret = ();
#     my $i = 0;
#     while (scalar(@bits)) {
#        if (shift @bits) {
#           my $slow = $low + ($i * GRANULARITY);
#          #push @ret, sprintf("%.1f-%.1f",$slow, $slow + GRANULARITY);
#           push @ret, sprintf("wot0 between %.1f and %.1f",
#              $slow, $slow + GRANULARITY);
#        }
#        $i++;
#     }
#     return join(' or ', @ret);
#  }


# this sub could also be written way better, when not under duress
sub hack {
   my ($bits, $low) = @_;
   my @bits = reverse(split('',sprintf('%b',$bits)));
   my $li   = undef;
   my $hi   = undef;
   my $on   = undef;
   my $i    = 0;
#printf("%12s, %12b, ", join('',@bits), $bits);
   while (!defined($hi) && scalar(@bits)) {
      if (shift @bits) {
         if (!$on) {
            $on = 1;
            $li = $i;
         }
      } elsif ($on) {
         $hi = $i;
      }
      $i++;
   }
   if (!defined($hi)) { $hi = $i; }
   if ($li == $hi) { print "<\n"; return ''; }
   my $ret = sprintf("%.0f,%.0f",
      $low + ($li * GRANULARITY),
      $low + ($hi * GRANULARITY)
   );
#print "$ret<\n";
   return $ret;
}

#for my $b (0..31) {
#   printf("%15b - %d\n", $b , downsample($b));
#}
#exit;

my $pid = 0;
for my $bin (5, 10, 15) {
   for (my $g = 1; $g < (2 ** ((G_HIGH - G_LOW)/GRANULARITY)); $g++) {
      if (downsample($g)) { next; }
      my $gr = hack($g, G_LOW);
      for (my $b = 1; $b < (2 ** ((B_HIGH - B_LOW)/GRANULARITY)); $b++) {
         if (downsample($b)) { next; }
         my $br = hack($b, B_LOW);
         printf("%d,%d,%s,%s\n", $pid, $bin, $gr, $br);
         $pid++;
      }
   }
}

#for my $binsz (5, 10, 20) {
#   print "$binsz\n";
#}
